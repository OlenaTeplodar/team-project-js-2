{"mappings":"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","sources":["src/js/api.js","src/js/Templates/cards.js","src/js/home-page.js","src/js/movie-card-modal.js","src/js/markup-trailer.js","src/js/search-movies.js","src/index.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9fae0fdf266213c68361ca578a95b948';\nexport default class FetchApiMovies {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.language = 'en-US';\n  }\n  // Реалізація для запиту на список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці:\n  async fetchPopularMovies() {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=${this.language}&page=${this.page}`\n      );\n      return await response.data;\n    } catch (error) {\n      error;\n    }\n  }\n  // Реалізація для запиту фільму за ключовим словом на головній сторінці:\n  async fetchSearchMovies() {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=${this.language}&page=${this.page}&query=${this.searchQuery}&include_adult=false`\n      );\n      return await response.data;\n    } catch (error) {\n      error;\n    }\n  }\n  // Реалізація для запиту повної інформації про кінофільм для сторінки кінофільму:\n  // Реалізація для запиту повної інформації про можливий трейлер на YouTube:\n  async fetchIdMovies(movieID) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/movie/${movieID}?api_key=${API_KEY}&language=${this.language}`\n      );\n      return await response.data;\n    } catch (error) {\n      error;\n    }\n  }\n\n  // Реалізація для запиту за жанрами:\n  async fetchGenresMovies() {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=${this.language}`\n      );\n      return await response.data;\n    } catch (error) {\n      error;\n    }\n  }\n  // Fetch підвантаження трейлера до фільму для модального вікна\n  async fetchMoviesTrailers(id) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/movie/${id}/videos?api_key=${API_KEY}&language=${this.language}&page=${this.page}`\n      );\n      return await response.data;\n    } catch (error) {\n      error;\n    }\n  }\n\n  incrementPage() {\n    return (this.page += 1);\n  }\n\n  decrementPage() {\n    if (this.page === 1) {\n      return;\n    }\n    return (this.page -= 1);\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  get pageNum() {\n    return this.page;\n  }\n\n  set pageNum(newPage) {\n    this.page = newPage;\n  }\n}\n","const refs = {\n  cardList: document.querySelector('.cards__list'),\n};\n\nexport function renderMoviesCard(cards) {\n  refs.cardList.insertAdjacentHTML('beforeend', createMoviesCard(cards));\n}\n\nexport function clearMoviesContainer() {\n  refs.cardList.innerHTML = '';\n}\n\nconst GENRE_KEY = 'genreList';\nlet genreList = {};\n\nexport function addGenreList(genre_ids) {\n  if (localStorage.key === GENRE_KEY) {\n    return (genreList = load(GENRE_KEY));\n  }\n  let genreNames = genre_ids.map(id => genreList[id]);\n  if (genreNames.length > 2) {\n    return `${genreNames[0]}, ${genreNames[1]}, Other`;\n  }\n  return genreNames.join(', ');\n}\n\nfunction createMoviesCard(cards = []) {\n  return cards\n    .map(card => {\n      const { id, title, poster_path, genre_ids, release_date } = card;\n      return `<li class=\"home-card__link\" id=${id}>\n\t\t  <div class = \"home-card__thumb\">\n\t\t  <picture class=\"home-card__poster\">\n\t\t\t\t\t<source media=\"(min-width:1280px)\"  srcset=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n\t\t\t\t\t<source media=\"(min-width:768px)\"  srcset=\"https://image.tmdb.org/t/p/w400${poster_path}\">\n\t\t\t\t\t<img class=\"home-card__img\" src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\" loading=\"lazy\">\n\t\t\t\t</picture>\n\t\t\t</div>\n\t\t\t<div class=\"card__content\">\n\t\t\t<h2 class=\"card__title\">${title}</h2>\n\t\t\t<p class=\"card__text\">${addGenreList(genre_ids)} | ${new Date(\n        release_date\n      ).getFullYear()}</p>\n\t  </div>\n\t\t\t</li>`;\n    })\n    .join('');\n}\n","import FetchApiMovies from './api';\nimport { renderMoviesCard } from './Templates/cards';\n// import { pagination } from './pagination';\n\nconst fetchApiHomeContent = new FetchApiMovies();\nshowPopularMovies();\n\nasync function showPopularMovies() {\n  // spinerPlay();\n  try {\n    const data = await fetchApiHomeContent.fetchPopularMovies();\n    const cards = data.results;\n    console.log(cards);\n    renderMoviesCard(cards);\n  } catch (error) {\n    console.log(error);\n    // Notify.failure(error.message);\n    // refs.pagination.classList.add('is-hidden');\n  }\n  //   spinerStop();\n}\n\n// spinerPlay();\n","import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { genres } from './Templates/genres';\n\n// для трейлера до фільму у модалці\nimport FetchApiMovies from './api';\nimport { markupMovieTrailer } from './markup-trailer';\n\nconst refs = {\n  modalFilmBackdrop: document.querySelector('[data-modal-film]'),\n  modalFilm: document.querySelector('.modal-film'),\n  div: document.querySelector('.modal-film '),\n  cardFilm: document.querySelector('.cards__list'),\n  cardFilmLibrary: document.querySelector('.container-library'),\n};\n\nrefs.cardFilm.addEventListener('click', onOpenModalFilm);\nrefs.modalFilmBackdrop.addEventListener('click', onBackdropClick);\n\n// --------open/close-modal\n\nfunction onOpenModalFilm(e) {\n  refs.modalFilmBackdrop.classList.remove('is-hidden');\n  refs.div.classList.remove('is-hidden');\n  document.body.classList.add('no-scroll');\n\n  document.addEventListener('click', onCloseModalFilmByBtn);\n  window.addEventListener('keydown', onCloseEscBtn);\n\n  const idCard = e.target.closest('.home-card__link').id;\n  console.log(idCard);\n\n  createMovieCard(idCard);\n\n  fetchMovieById(idCard).then(response => {\n    refs.modalFilm.innerHTML = '';\n    return render(response);\n  });\n  // // ------ trailer movie-------\n  const boxFetchApiMovies = new FetchApiMovies();\n  boxFetchApiMovies\n    .fetchMoviesTrailers(idCard)\n    .then(data => {\n      console.log(data);\n      // перевірка якщо пустий масив\n      // показувати картинку\n      if (data.results.length === 0) {\n        return;\n      }\n      const picture = document.querySelector('.modal-film-card-wrapper');\n      picture.remove();\n      const markupTrailer = markupMovieTrailer(data.results[0].key);\n      refs.modalFilm.insertAdjacentHTML('afterbegin', markupTrailer);\n    })\n    .catch(error => console.log(error));\n  // // ------------ end treiler movie -------------\n}\n\nfunction closeModalFilm() {\n  window.removeEventListener('keydown', onCloseEscBtn);\n  document.removeEventListener('click', onCloseModalFilmByBtn);\n  refs.modalFilmBackdrop.classList.add('is-hidden');\n  refs.div.classList.add('is-hidden');\n  document.body.classList.remove('no-scroll');\n}\n\nfunction onCloseModalFilmByBtn(e) {\n  if (\n    e.target.classList.contains('close-modal__btn-text') ||\n    e.target.classList.contains('close-modal__btn-inner') ||\n    e.target.classList.contains('close-modal__btn-text')\n  ) {\n    closeModalFilm();\n  }\n}\n\nfunction onBackdropClick(e) {\n  if (e.currentTarget === e.target) {\n    closeModalFilm();\n  }\n}\n\nfunction onCloseEscBtn(e) {\n  // console.log(e.code);\n  if (e.code === 'Escape') {\n    closeModalFilm();\n  }\n}\n\n// -----Fetch-by-id---\n\nasync function fetchMovieById(idMovie) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${idMovie}?api_key=9fae0fdf266213c68361ca578a95b948&language=en-US`\n    );\n    // console.log(response.data);\n\n    return await response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n// -------Create-interface----\n\nasync function createMovieCard(id) {\n  try {\n    const response = await fetchMovieById(id);\n    // console.log(response);\n    refs.modalFilm.innerHTML = '';\n\n    render(response);\n  } catch (error) {\n    console.log(error.message);\n    closeModalFilm();\n    Notify.failure('Sorry, movie not found. Please try again.');\n  }\n}\n\n// ---Render--\nfunction render(response) {\n  const detailsCard = getModalMovieCardMarkup(response);\n  getWatchedToLocalStr(response);\n  getQueuedToLocalStr(response);\n\n  refs.modalFilm.insertAdjacentHTML('beforeend', detailsCard);\n\n  const btnWatchedFilmModalWindowEl = document.querySelector(\n    '.modal-window__watched-btn'\n  );\n  btnWatchedFilmModalWindowEl.addEventListener('click', onClickBtnWatchedFilm);\n  const btnQueuedFilmModalWindowEl = document.querySelector(\n    '.modal-window__queued-btn'\n  );\n  btnQueuedFilmModalWindowEl.addEventListener('click', onClickBtnQueuedFilm);\n}\n\n// ------Markup----\n\nconst getModalMovieCardMarkup = ({\n  id,\n  title,\n  original_title,\n  overview,\n  poster_path,\n  vote_average,\n  vote_count,\n  popularity,\n  genres,\n}) => {\n  const genresList = genres.map(genre => genre.name).join(', ');\n\n  // const watchedFilm = localStorage.getItem('WATCHED-FILM');\n  // const watchedFilmsArray = JSON.parse(watchedFilm) || [];\n  // const queuedFilm = localStorage.getItem('QUEUED-FILM');\n  // const queuedFilmsArray = JSON.parse(queuedFilm) || [];\n\n  // const a = String(id);\n\n  // const hasWatchedFilm = watchedFilmsArray.some(value => value === String(id));\n  // console.log(hasWatchedFilm);\n  // console.log(id);\n\n  // console.log(watchedFilmsArray);\n\n  // const hasWatchedFilm = watchedFilmsArray.includes(id);\n  // console.log(hasWatchedFilm);\n  // console.log(id);\n\n  return `\n  <button\n      type=\"button\"\n      class=\"modal-film__close-button close-modal__btn\"\n    >\n    <div class=\"close-modal__btn-inner\">\n    <span class=\"close-modal__btn-text\">Back\n    </span> </div>\n    </button>\n  <div class=\"modal-film__card\"  id=\"${id}\">\n  <div class=\"modal-film-card-wrapper\">\n  <picture class=\"modal-film__img>\n  <source media=\"(min-width:1024px)\" srcset=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n  <source media=\"(min-width:768px)\"  srcset=\"https://image.tmdb.org/t/p/w400${poster_path}\">\n  <img class=\"img-film__poster\" src=\"https://image.tmdb.org/t/p/w300${poster_path}\"  \"alt=\"${title}\" loading=\"lazy\"  >\n</picture>\n</div>\n<div class=\"movie-info\">\n  <h2 class=\"film-title\">${title}</h2>\n  <ul class=\"film-title__list-film\">\n  <li class=\"film-title__item-film\"><p class=\"film-title__value\" >Vote / Votes </p><p class=\"film-title__desc-film\"><span class=\"film-title__vote_average\">${vote_average}</span><span class=\"film-title__slash\">/</span><span class=\"film-title__vote_count\">${vote_count}</span> </p> </li>\n  <li class=\"film-title__item-film\"><p class=\"film-title__value\">Popularity</p><p class=\"film-title__desc-film\">${popularity}</p></li>\n  <li class=\"film-title__item-film\"><p class=\"film-title__value\">Original Title</p><p class=\"film-title__desc-film\">${original_title}</p></li>\n  <li class=\"film-title__item-film\"><p class=\"film-title__value\">Genre</p><p class=\"film-title__desc-film\">${genresList}</p></li>\n  </ul>\n  <h3 class=\"about-title\">About ${original_title}</h3>\n  <p class=\"text-about-movie\">${overview}</p>\n  <ul>\n      <li><button class=\"modal-window__watched-btn\" type=\"button\" data-id=${id}>Add</button></li>\n      <li><button class=\"modal-window__queued-btn\" type=\"button\" data-id=${id}>Add to queue</button></li>\n    </ul>\n  </div>\n`;\n};\n\n//////////////////////////////////////// Работа с localStorage ///////////////////////////////////\n\nconst watchedFilm = localStorage.getItem('WATCHED-FILM');\nconst watchedFilmsArray = JSON.parse(watchedFilm) || [];\nconst queuedFilm = localStorage.getItem('QUEUED-FILM');\nconst queuedFilmsArray = JSON.parse(queuedFilm) || [];\n\n// function arrayFilms() {\n//   const watchedFilmsArray = JSON.parse(watchedFilm) || [];\n//   return watchedFilmsArray\n\n// }\n\n//  const hasWatchedFilm = watchedFilmsArray.includes(id);\n// const aboutFilm = {};\n// console.log(aboutFilm);\n\n// console.log(watchedFilm);\n\nfunction onClickBtnWatchedFilm(e) {\n  const watchedBtn = e.target;\n  const idWatchedFilm = watchedBtn.dataset.id;\n  console.log(idWatchedFilm);\n\n  const hasWatchedFilm = watchedFilmsArray.includes(idWatchedFilm);\n  if (hasWatchedFilm) {\n    return;\n  } else {\n    // watchedFilmsArray.push(idWatchedFilm);\n    // getToLocalStr(response);\n    localStorage.setItem('WATCHED-FILM', JSON.stringify(watchedFilmsArray));\n    return;\n  }\n}\n\nfunction onClickBtnQueuedFilm(e) {\n  const queuedBtn = e.target;\n  const idQueuedFilm = queuedBtn.dataset.id;\n  console.log(idQueuedFilm);\n\n  const hasQueuedFilm = queuedFilmsArray.includes(idQueuedFilm);\n  if (hasQueuedFilm) {\n    return;\n  } else {\n    // queuedFilmsArray.push(idQueuedFilm);\n    localStorage.setItem('QUEUED-FILM', JSON.stringify(queuedFilmsArray));\n    return;\n  }\n}\n\nfunction getWatchedToLocalStr(response) {\n  watchedFilmsArray.push(response);\n  // queuedFilmsArray.push(response);\n}\n\nfunction getQueuedToLocalStr(response) {\n  // watchedFilmsArray.push(response);\n  queuedFilmsArray.push(response);\n}\n\n// function checkFilmInLocStr(idCard) {\n//   const hasWatchedFilm = watchedFilmsArray.includes(idCard);\n//   // if (hasWatchedFilm) {\n//   //   return console.log('true');\n//   // } else {\n//   //   return console.log('false');\n//   // }\n//   return hasWatchedFilm;\n// }\n\n// const btnWatchedFilmModalWindowEl = document.querySelector(\n//   '.modal-window__watched-btn'\n// );\n\n// const btnQueuedFilmModalWindowEl = document.querySelector(\n//   '.modal-window__queued-btn'\n// );\n","export function markupMovieTrailer(youtubeKeyId) {\n  return `\n    <iframe id=\"trailer\" class=\"player\" width=\"420\" height=\"315\" allowfullscreen=\"allowfullscreen\"\n    src=\"https://www.youtube.com/embed/${youtubeKeyId}\"\n    frameborder=\"0\"></iframe>\n  `;\n}\n","import FetchApiMovies from './api';\nimport { clearMoviesContainer } from './Templates/cards';\nimport { renderMoviesCard } from './Templates/cards';\nimport { spinner } from './spinner';\n\nconst refs = {\n  cardList: document.querySelector('.gallery__list'),\n  formSearch: document.querySelector('.header__form'),\n  notification: document.querySelector('.header__notification'),\n};\nconst target = document.getElementById('foo'); //spinner\n\nconst fetchSearchApi = new FetchApiMovies();\nrefs.formSearch.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  refs.notification.textContent = '';\n  fetchSearchApi.query = e.currentTarget.elements.searchQuery.value\n    .trim()\n    .toLowerCase();\n  if (fetchSearchApi.query === '') {\n    return notification();\n  }\n  getSearchMovies();\n}\n\nfunction notification() {\n  refs.notification.textContent =\n    'Search result not successful. Enter the correct movie name and try again.';\n}\n\nasync function getSearchMovies() {\n  try {\n    spinner.spin(target); //spinner\n    const data = await fetchSearchApi.fetchSearchMovies();\n    const cards = data.results;\n    console.log(cards);\n    renderMoviesCard(cards);\n    console.log(data);\n    clearMoviesContainer();\n    renderMoviesCard(cards);\n    if (data.total_results === 0) {\n      notification();\n      return;\n    } else {\n      notification();\n    }\n  } catch (error) {\n    notification();\n  } finally {\n    //spinner\n    spinner.stop();\n  }\n}\n","// import { database } from './js/firebase-module';\n\nimport './sass/index.scss';\nimport './js/home-page';\nimport './js/about-team-modal';\nimport './js/movie-card-modal';\nimport 'basiclightbox/dist/basicLightbox.min.css';\nimport { onFormSubmit } from './js/search-movies';\nimport { btnUp } from './js/button-up';\n\nbtnUp.addEventListener();\n"],"names":["$2shzp","parcelRequire","$56ca17bb174b0ce3$var$BASE_URL","$56ca17bb174b0ce3$var$API_KEY","$56ca17bb174b0ce3$export$2e2bcd8739ae039","async","response","default","get","this","language","page","data","error","searchQuery","movieID","id","incrementPage","decrementPage","resetPage","query","newQuery","pageNum","newPage","constructor","$023177a58ff72e48$var$refs","cardList","document","querySelector","$023177a58ff72e48$export$f48ccfcd8b08d9f9","cards","insertAdjacentHTML","map","card","title","poster_path","genre_ids","release_date","localStorage","key","$023177a58ff72e48$var$GENRE_KEY","$023177a58ff72e48$var$genreList","load","genreNames","length","join","$023177a58ff72e48$export$a80bb12e7f609a51","Date","getFullYear","$023177a58ff72e48$var$createMoviesCard","$023177a58ff72e48$export$cba41b50396d8e3","innerHTML","$9bfb79a853d4dcfb$var$fetchApiHomeContent","fetchPopularMovies","results","console","log","$9bfb79a853d4dcfb$var$showPopularMovies","$67b5d2182eaf8ad0$var$refs","modalFilmBackdrop","modalFilm","div","cardFilm","cardFilmLibrary","$67b5d2182eaf8ad0$var$closeModalFilm","window","removeEventListener","$67b5d2182eaf8ad0$var$onCloseEscBtn","$67b5d2182eaf8ad0$var$onCloseModalFilmByBtn","classList","add","body","remove","e","target","contains","code","$67b5d2182eaf8ad0$var$fetchMovieById","idMovie","message","$67b5d2182eaf8ad0$var$render","detailsCard","$67b5d2182eaf8ad0$var$getModalMovieCardMarkup","$67b5d2182eaf8ad0$var$watchedFilmsArray","push","$67b5d2182eaf8ad0$var$getWatchedToLocalStr","$67b5d2182eaf8ad0$var$queuedFilmsArray","$67b5d2182eaf8ad0$var$getQueuedToLocalStr","addEventListener","$67b5d2182eaf8ad0$var$onClickBtnWatchedFilm","$67b5d2182eaf8ad0$var$onClickBtnQueuedFilm","idCard","closest","$iQIUW","Notify","failure","$67b5d2182eaf8ad0$var$createMovieCard","then","fetchMoviesTrailers","markupTrailer","catch","currentTarget","original_title","overview","vote_average","vote_count","popularity","genres","genre","name","$67b5d2182eaf8ad0$var$watchedFilm","getItem","JSON","parse","$67b5d2182eaf8ad0$var$queuedFilm","idWatchedFilm","dataset","includes","setItem","stringify","idQueuedFilm","$8fb5953e1e6c8326$var$refs","formSearch","notification","$8fb5953e1e6c8326$var$target","getElementById","$8fb5953e1e6c8326$var$fetchSearchApi","$8fb5953e1e6c8326$var$notification","textContent","preventDefault","elements","value","trim","toLowerCase","$04jNI","spinner","spin","fetchSearchMovies","total_results","stop","$8fb5953e1e6c8326$var$getSearchMovies","btnUp"],"version":3,"file":"index.c550822f.js.map"}